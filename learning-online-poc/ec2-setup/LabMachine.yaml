AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  RegionMap:
    us-east-1:
      "AMALINUX1" : "ami-0080e4c5bc078760e"
      "AMALINUX2" : "ami-0de53d8956e8dcf80"
    us-west-1:
      "AMALINUX1" : "ami-0ec6517f6edbf8044"
      "AMALINUX2" : "ami-0a16c82eb0cc3aad8"
    ap-south-1:
      "AMALINUX1" : "ami-0ad42f4f66f6c1cc9"
      "AMALINUX2" : "ami-09243352e7fc54770"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: VPC
        Parameters:
          - vpcCIDR
          - az
          - azPublicSubnetCIDR
          - keypair
    ParameterLabels:
      vpcCIDR:
        default: VPC CIDR
      az:
        default: Availability Zone
      azPublicSubnetCIDR:
        default: Public Subnet CIDR
      keypair:
        default: Key Pair
Parameters:
  vpcCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.22.0.0/16
  az:
    Type: "AWS::EC2::AvailabilityZone::Name"
    Default: "us-east-1a"
  azPublicSubnetCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/24
    Default: 10.22.1.0/24
  keypair:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    ConstraintDescription : "must be the name of an existing EC2 KeyPair."
    Default: "DDBCourse"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
      - Key: Name
        Value: !Join ["", [!Ref "AWS::StackName", "-", "VPC"]]
  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Join ["", [!Ref "AWS::StackName", "-", "IGW"]]
  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  pubsub:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref az
      CidrBlock: !Ref azPublicSubnetCIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public", "subnet"]]
  pubsubrt:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref "AWS::StackName", "public", "route table"]]
  pubsubpubroute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref pubsubrt
  pubsubrta:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref pubsubrt
      SubnetId: !Ref pubsub
  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '115.249.63.129/32'
          Description: Allow SSH access from work computer
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '115.249.63.129/32'
          Description: Allow HTTP access from work computer
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "ec2", "sec", "grp"]]
  ec2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT5M
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX1]
      InstanceType: t2.micro
      SubnetId: !Ref pubsub
      KeyName: !Ref keypair
      SecurityGroupIds:
        - !Ref EC2SG
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ec2Instance --configsets setupec2 --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ec2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName", "ec2"]]
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setupec2:
            - "configureCFN"
            - "installwww"
            - "configApp"
        configureCFN:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ec2Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ec2Instance --configsets setupec2 --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        installwww:
          packages:
            yum:
              gcc: []
              httpd: []
            python:
              boto3: []
              Faker: []
              tqdm: []
              multiprocessing: []
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/var/www/html"
        configApp:
          sources:
            /home/ec2-user/: "https://codeload.github.com/ACloudGuru/DynamoDB-B2P/zip/master"
          commands:
            01_retryjson:
              command: "mkdir -p /home/ec2-user/.aws/model && cp /home/ec2-user/DynamoDB-B2P-master/01-configuring-your-aws-account/_retry.json \"$_\""
            02_permissions:
              command: "chown ec2-user:ec2-user /home/ec2-user/* -hR"
            03_permissionshidden:
              command: "chown ec2-user:ec2-user /home/ec2-user/.* -hR"
            04_permissionsaws:
              command: "chown ec2-user:ec2-user /home/ec2-user/.aws/ -R"
            05_permissionsLabFiles:
              command: "chmod 755  /home/ec2-user/DynamoDB-B2P-master -R"
Outputs:
  ec2pubIp:
    Description: Public IP address of EC2 instance
    Value: !GetAtt ec2Instance.PublicIp
  ec2pvtIp:
    Description: Private IP address of EC2 instance
    Value: !GetAtt ec2Instance.PrivateIp
